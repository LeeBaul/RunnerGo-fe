'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var JSON5 = require('json5');
var html_beautify = require('html-beautify');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var JSON5__default = /*#__PURE__*/_interopDefaultLegacy(JSON5);
var html_beautify__default = /*#__PURE__*/_interopDefaultLegacy(html_beautify);

var isJson = function (str) {
    if (typeof str === 'string') {
        try {
            var obj = JSON.parse(str);
            if (typeof obj === 'object' && obj) {
                return true;
            }
            else {
                return false;
            }
        }
        catch (e) {
            return false;
        }
    }
    else {
        return false;
    }
};

var isJsonp = function (jsonp) {
    try {
        var index = jsonp.indexOf('(');
        var last_index = jsonp.lastIndexOf(')');
        var str = jsonp.slice(index + 1, last_index);
        return isJson(str);
    }
    catch (error) {
        return false;
    }
};

var isJson5 = function (str) {
    if (typeof str === 'string') {
        try {
            var obj = JSON5__default["default"].parse(str);
            if (typeof obj === 'object' && obj) {
                return true;
            }
            else {
                return false;
            }
        }
        catch (e) {
            return false;
        }
    }
    else {
        return false;
    }
};

var isEmail = function (str) {
    try {
        var emaileRegExp = new RegExp('^([a-zA-Z0-9_\\-\.])+@([a-zA-Z0-9_\\-\.])+\.([a-zA-Z]{2,4})$');
        return emaileRegExp.test(str);
    }
    catch (error) {
        return false;
    }
};

var getUrlQuery = function (url) {
    try {
        var urlArr = url.split('?');
        if (urlArr.length > 1) {
            return urlArr[1].split('&').reduce(function (searchParams, curKV) {
                var _a = curKV.split('=').map(decodeURIComponent), k = _a[0], v = _a[1];
                if (!v || v === undefined) {
                    v = '';
                }
                if (k && k.length > 0) {
                    searchParams[k] = v;
                }
                return searchParams;
            }, {});
        }
        return {};
    }
    catch (error) {
        return {};
    }
};

var getUrlQueryArray = function (url) {
    try {
        var array = [];
        var arrObj = url.split('?');
        if (arrObj.length > 1) {
            var arrPara = arrObj[1].split('&');
            var arr = void 0;
            for (var i = 0; i < arrPara.length; i++) {
                arr = arrPara[i].split('=');
                if (arr != null && arr.length !== 0) {
                    if (arr.length === 1) {
                        array.push({
                            key: arr[0],
                            value: '',
                        });
                    }
                    else {
                        var key = arr[0];
                        arr.shift();
                        array.push({
                            key: key,
                            value: arr.join('='),
                        });
                    }
                }
            }
        }
        return array;
    }
    catch (error) {
        return [];
    }
};

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

var array2Tree = function (items, idName, pidName) {
    if (idName === void 0) { idName = 'id'; }
    if (pidName === void 0) { pidName = 'pid'; }
    try {
        var result = [];
        var itemMap = {};
        for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
            var item = items_1[_i];
            var id = item[idName];
            var pid = item[pidName];
            if (!id || id == undefined) {
                continue;
            }
            if (!itemMap.hasOwnProperty(id)) {
                itemMap[id] = {
                    children: [],
                };
            }
            itemMap[id] = __assign(__assign({}, item), { children: itemMap[id]['children'] });
            var treeItem = itemMap[id];
            if (pid == 0 || pid == undefined) {
                result.push(treeItem);
            }
            else {
                if (!itemMap.hasOwnProperty(pid)) {
                    itemMap[pid] = {
                        children: [],
                    };
                }
                itemMap[pid].children.push(treeItem);
            }
        }
        return result;
    }
    catch (error) {
        return [];
    }
};

var isHtml = function (html) {
    try {
        if (typeof html !== 'string') {
            //       html = '';
            return false;
        }
        var trimmed = html.replace(/^[ \t\n\r]+/, '');
        return Boolean(trimmed) && (trimmed.substring(0, 1) === '<') && (trimmed.charAt(trimmed.length - 1) === '>');
    }
    catch (error) {
        return false;
    }
};

var ms2second = function (time) {
    try {
        var time_temp = "".concat(time);
        if (time_temp.length === 13) {
            time_temp = time_temp.substr(0, time_temp.length - 3);
        }
        return parseInt(time_temp, 10);
    }
    catch (error) {
        return 0;
    }
};

var setPrefix = function (prefixIndex) {
    var result = '';
    var span = '    '; // 缩进长度
    var output = [];
    for (var i = 0; i < prefixIndex; ++i) {
        output.push(span);
    }
    result = output.join('');
    return result;
};
var formatXml = function (xmlStr) {
    try {
        var text = xmlStr;
        // 使用replace去空格
        text = "\n".concat(text.replace(/(<\w+)(\s.*?>)/g, function ($0, name, props) {
            return "".concat(name, " ").concat(props.replace(/\s+(\w+=)/g, ' $1'));
        }).replace(/>\s*?</g, '>\n<'));
        // 处理注释
        text = text.replace(/\n/g, '\r').replace(/<!--(.+?)-->/g, function ($0, text) {
            var ret = "<!--".concat(escape(text), "-->");
            return ret;
        }).replace(/\r/g, '\n');
        // 调整格式  以压栈方式递归调整缩进
        var rgx = /\n(<(([^\?]).*?)(?:\s|\s*?>|\s*?(\/)>)(?:.*?(?:(?:(\/)>)|(?:<(\/)\2>)))?)/mg;
        var nodeStack_1 = [];
        var output = text.replace(rgx, function ($0, all, name, isBegin, isCloseFull1, isCloseFull2, isFull1, isFull2) {
            var isClosed = (isCloseFull1 == '/') || (isCloseFull2 == '/') || (isFull1 == '/') || (isFull2 == '/');
            var prefix = '';
            if (isBegin == '!') { //! 开头
                prefix = setPrefix(nodeStack_1.length);
            }
            else {
                if (isBegin != '/') { /// 开头
                    prefix = setPrefix(nodeStack_1.length);
                    if (!isClosed) { // 非关闭标签
                        nodeStack_1.push(name);
                    }
                }
                else {
                    nodeStack_1.pop(); // 弹栈
                    prefix = setPrefix(nodeStack_1.length);
                }
            }
            var ret = "\n".concat(prefix).concat(all);
            return ret;
        });
        var outputText = output.substring(1);
        // 还原注释内容
        outputText = outputText.replace(/\n/g, '\r').replace(/(\s*)<!--(.+?)-->/g, function ($0, prefix, text) {
            if (prefix.charAt(0) == '\r') {
                prefix = prefix.substring(1);
            }
            text = unescape(text).replace(/\r/g, '\n');
            var ret = "\n".concat(prefix, "<!--").concat(text.replace(/^\s*/mg, prefix), "-->");
            return ret;
        });
        outputText = outputText.replace(/\s+$/g, '').replace(/\r/g, '\r\n');
        return outputText;
    }
    catch (error) {
        return '';
    }
};

var formatHtml = function (html) {
    html = html_beautify__default["default"](html, {});
    return html.replace(/\n(\n)*( )*(\n)*\n/g, '\n');
};

var jsonp2Obj = function (jsonp) {
    if (!isJsonp(jsonp)) {
        return jsonp;
    }
    var pattern = /([\s\S]*?)\(([\s\S]*?)\)([\s\S]*?)/;
    var Res = jsonp.match(pattern);
    if (isJson(Res && Res[2])) {
        return ["".concat(Res[1], "("), Res[2], ")".concat(Res[3])];
    }
    else {
        return jsonp;
    }
};

// 成功结果对象
var successResult = function (data) {
    return {
        status: 'success',
        data: data
    };
};

// 失败结果对象
var errorResult = function (message) {
    return {
        status: 'error',
        message: message
    };
};

var index = {
    isJson: isJson,
    isJsonp: isJsonp,
    isJson5: isJson5,
    isEmail: isEmail,
    getUrlQuery: getUrlQuery,
    getUrlQueryArray: getUrlQueryArray,
    array2Tree: array2Tree,
    isHtml: isHtml,
    ms2second: ms2second,
    formatXml: formatXml,
    formatHtml: formatHtml,
    jsonp2Obj: jsonp2Obj,
    successResult: successResult,
    errorResult: errorResult
};

exports.array2Tree = array2Tree;
exports["default"] = index;
exports.errorResult = errorResult;
exports.formatHtml = formatHtml;
exports.formatXml = formatXml;
exports.getUrlQuery = getUrlQuery;
exports.getUrlQueryArray = getUrlQueryArray;
exports.isEmail = isEmail;
exports.isHtml = isHtml;
exports.isJson = isJson;
exports.isJson5 = isJson5;
exports.isJsonp = isJsonp;
exports.jsonp2Obj = jsonp2Obj;
exports.ms2second = ms2second;
exports.successResult = successResult;

'use strict';

var SwaggerClient = require('swagger-client');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var SwaggerClient__default = /*#__PURE__*/_interopDefaultLegacy(SwaggerClient);

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var Swagger2Apipost = /** @class */ (function () {
    function Swagger2Apipost() {
        this.version = '2.0';
        this.project = {};
        this.basePath = '';
        this.apis = [];
        this.folders = {};
        this.baseParams = {};
        this.env = [];
        this.options = {
            basePath: true,
            host: true
        };
    }
    Swagger2Apipost.prototype.ConvertResult = function (status, message, data) {
        if (data === void 0) { data = ''; }
        return {
            status: status,
            message: message,
            data: data
        };
    };
    Swagger2Apipost.prototype.getApipostMode = function (mode) {
        var apipostMode = 'none';
        if (mode == 'multipart/form-data') {
            apipostMode = 'form-data';
        }
        else if (mode == 'application/x-www-form-urlencoded') {
            apipostMode = 'urlencoded';
        }
        else if (mode && mode != undefined) {
            apipostMode = 'json';
        }
        return apipostMode;
    };
    Swagger2Apipost.prototype.validate = function (json) {
        if (json.hasOwnProperty('swagger')) {
            if (json.swagger !== '2.0') {
                return this.ConvertResult('error', 'Must contain a swagger field 2.0');
            }
            else {
                this.version = '2.0';
            }
        }
        if (json.hasOwnProperty('openapi')) {
            this.version = '3.0';
        }
        if (!json.hasOwnProperty('swagger') && !json.hasOwnProperty('openapi')) {
            return this.ConvertResult('error', 'Must contain a swagger field 2.0 or 3.0');
        }
        return this.ConvertResult('success', '');
    };
    Swagger2Apipost.prototype.handleBodyJsonSchema = function (result, properties) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        for (var key in properties) {
            var type = 'string';
            var item = properties[key];
            if (item.hasOwnProperty('type') && typeof item.type === 'string') {
                type = item.type.toLowerCase();
            }
            if (type === 'object') {
                console.log('itemitem', item);
                result[key] = {};
                if (item.hasOwnProperty('additionalProperties') && (item === null || item === void 0 ? void 0 : item.additionalProperties)) {
                    this.handleBodyJsonSchema(result[key], ((_a = item === null || item === void 0 ? void 0 : item.additionalProperties) === null || _a === void 0 ? void 0 : _a.properties) || {});
                }
                else {
                    this.handleBodyJsonSchema(result[key], (item === null || item === void 0 ? void 0 : item.properties) || {});
                }
            }
            else if (type === 'array') {
                var arrayObj = {};
                result[key] = [arrayObj];
                if (item.hasOwnProperty('items') && (item === null || item === void 0 ? void 0 : item.items)) {
                    if ((item === null || item === void 0 ? void 0 : item.items.hasOwnProperty('oneOf')) && ((_b = item === null || item === void 0 ? void 0 : item.items) === null || _b === void 0 ? void 0 : _b.oneOf)) {
                        this.handleBodyJsonSchema(arrayObj, ((_e = (_d = (_c = item === null || item === void 0 ? void 0 : item.items) === null || _c === void 0 ? void 0 : _c.oneOf) === null || _d === void 0 ? void 0 : _d[0]) === null || _e === void 0 ? void 0 : _e.properties) || {});
                    }
                    else {
                        this.handleBodyJsonSchema(arrayObj, ((_f = item === null || item === void 0 ? void 0 : item.items) === null || _f === void 0 ? void 0 : _f.properties) || {});
                    }
                }
                else if (item.hasOwnProperty('additionalProperties') && (item === null || item === void 0 ? void 0 : item.additionalProperties)) {
                    this.handleBodyJsonSchema(arrayObj, ((_g = item === null || item === void 0 ? void 0 : item.additionalProperties) === null || _g === void 0 ? void 0 : _g.properties) || {});
                }
                else {
                    this.handleBodyJsonSchema(arrayObj, (item === null || item === void 0 ? void 0 : item.properties) || {});
                }
            }
            else {
                var oneOfObj = {};
                if (item.hasOwnProperty('oneOf') && (item === null || item === void 0 ? void 0 : item.oneOf)) {
                    this.handleBodyJsonSchema(oneOfObj, ((_j = (_h = item === null || item === void 0 ? void 0 : item.oneOf) === null || _h === void 0 ? void 0 : _h[0]) === null || _j === void 0 ? void 0 : _j.properties) || {});
                    result[key] = oneOfObj;
                }
                else {
                    result[key] = (item === null || item === void 0 ? void 0 : item.example) || "";
                }
            }
        }
    };
    Swagger2Apipost.prototype.setBasePath = function (json) {
        this.basePath = '';
        if (json.host && this.options.host) {
            this.basePath = json.host;
        }
        if (json.basePath && this.options.basePath) {
            this.basePath += json.basePath;
        }
        // if (json.schemes && json.schemes.indexOf('https') != -1) {
        //   this.basePath = 'https://' + this.basePath;
        // }
        // else {
        //   this.basePath = 'http://' + this.basePath;
        // }
        if (!this.endsWith(this.basePath, '/')) {
            this.basePath += '/';
        }
    };
    Swagger2Apipost.prototype.handleInfo = function (json) {
        var _a, _b;
        this.project.name = ((_a = json === null || json === void 0 ? void 0 : json.info) === null || _a === void 0 ? void 0 : _a.title) || '新建项目';
        this.project.description = ((_b = json === null || json === void 0 ? void 0 : json.info) === null || _b === void 0 ? void 0 : _b.description) || '';
    };
    Swagger2Apipost.prototype.handleServers = function (json) {
        if (!json.hasOwnProperty('servers')) {
            return;
        }
        var servers = json.servers;
        for (var _i = 0, servers_1 = servers; _i < servers_1.length; _i++) {
            var server = servers_1[_i];
            var newEnv = {
                name: server.url || '未命名环境',
                pre_url: server.url || '',
                type: 'custom',
                list: {},
            };
            if (server.hasOwnProperty('variables')) {
                for (var key in server.variables) {
                    newEnv.list[key] = {
                        current_value: server.variables[key].default || '',
                        value: server.variables[key].default || '',
                        description: server.variables[key].description || '', // 参数描述
                    };
                }
            }
            this.env.push(newEnv);
        }
    };
    Swagger2Apipost.prototype.handleTags = function (tags, tagsInfo) {
        for (var _i = 0, tags_1 = tags; _i < tags_1.length; _i++) {
            var tagString = tags_1[_i];
            var tagArray = tagString.split('/');
            for (var index = 1; index < tagArray.length + 1; index++) {
                var tag = tagArray[index - 1];
                var folderPath = tagArray.slice(0, index).join('/');
                var grandpaFolderPath = tagArray.slice(0, index - 1).join('/');
                if (!this.folders.hasOwnProperty(folderPath)) {
                    this.folders[folderPath] = this.createNewFolder(tag, tagsInfo);
                    if (index == 1) {
                        this.apis.push(this.folders[folderPath]);
                    }
                    else {
                        this.folders[grandpaFolderPath].children.push(this.folders[folderPath]);
                    }
                }
            }
        }
    };
    Swagger2Apipost.prototype.handlePathV3 = function (path, pathItem, tags) {
        var _a, _b, _c;
        var url = path;
        // if(this.options.basePath){
        //   url=decodeURI(_url.resolve(this.basePath, path))
        // }
        if (path && path.charAt(0) == '/') {
            url = path.substring(1);
        }
        for (var method in pathItem) {
            var swaggerApi = pathItem[method];
            if (swaggerApi.hasOwnProperty('tags') && swaggerApi.tags.length > 0) {
                this.handleTags(swaggerApi.tags, tags);
            }
            var api = {
                'name': (swaggerApi === null || swaggerApi === void 0 ? void 0 : swaggerApi.summary) || '新建接口',
                'target_type': 'api',
                'url': url || '',
                'method': method.toUpperCase() || 'GET',
                'request': {
                    'description': (swaggerApi === null || swaggerApi === void 0 ? void 0 : swaggerApi.description) || '',
                },
                'response': {
                    'success': {
                        parameter: [],
                        raw: ''
                    },
                    'error': {
                        parameter: [],
                        raw: ''
                    }
                }
            };
            var request = api.request;
            var response = api.response;
            if (swaggerApi.hasOwnProperty('parameters')) {
                for (var _i = 0, _d = swaggerApi.parameters; _i < _d.length; _i++) {
                    var parameter = _d[_i];
                    if (parameter.hasOwnProperty('in')) {
                        if (parameter.in == 'query') {
                            if (!request.hasOwnProperty('query')) {
                                request['query'] = [];
                            }
                            (parameter === null || parameter === void 0 ? void 0 : parameter.name) && request.query.push({
                                is_checked: "1",
                                type: "Text",
                                key: (parameter === null || parameter === void 0 ? void 0 : parameter.name) || '',
                                value: (parameter === null || parameter === void 0 ? void 0 : parameter.example) || '',
                                not_null: parameter.hasOwnProperty('required') && !parameter.required ? "-1" : "1",
                                description: (parameter === null || parameter === void 0 ? void 0 : parameter.description) || '',
                                field_type: "Text" // 类型
                            });
                        }
                        else if (parameter.in == 'header') {
                            if (!request.hasOwnProperty('header')) {
                                request['header'] = [];
                            }
                            (parameter === null || parameter === void 0 ? void 0 : parameter.name) && request.header.push({
                                is_checked: "1",
                                type: "Text",
                                key: (parameter === null || parameter === void 0 ? void 0 : parameter.name) || '',
                                value: (parameter === null || parameter === void 0 ? void 0 : parameter.example) || '',
                                not_null: parameter.hasOwnProperty('required') && !parameter.required ? "-1" : "1",
                                description: (parameter === null || parameter === void 0 ? void 0 : parameter.description) || '',
                                field_type: "Text" // 类型
                            });
                        }
                        else if (parameter.in == 'path') {
                            if (!request.hasOwnProperty('resful')) {
                                request['resful'] = [];
                            }
                            (parameter === null || parameter === void 0 ? void 0 : parameter.name) && request.resful.push({
                                is_checked: "1",
                                type: "Text",
                                key: (parameter === null || parameter === void 0 ? void 0 : parameter.name) || '',
                                value: (parameter === null || parameter === void 0 ? void 0 : parameter.example) || '',
                                not_null: parameter.hasOwnProperty('required') && !parameter.required ? "-1" : "1",
                                description: (parameter === null || parameter === void 0 ? void 0 : parameter.description) || '',
                                field_type: "Text" // 类型
                            });
                        }
                    }
                }
            }
            if (swaggerApi.hasOwnProperty('requestBody') && swaggerApi.requestBody.hasOwnProperty('content')) {
                var content = swaggerApi.requestBody.content;
                var mode = content instanceof Object ? Object.keys(content)[0] : "none";
                var bodyData = content[mode];
                var apipostMode = this.getApipostMode(mode);
                var properties = {};
                if (bodyData.hasOwnProperty('schema')) {
                    var schema = bodyData.schema;
                    if ((schema === null || schema === void 0 ? void 0 : schema.type) === 'array') {
                        properties = (_a = schema === null || schema === void 0 ? void 0 : schema.items) === null || _a === void 0 ? void 0 : _a.properties;
                    }
                    else {
                        properties = schema === null || schema === void 0 ? void 0 : schema.properties;
                    }
                }
                request.body = {
                    "mode": apipostMode,
                    "parameter": [],
                    "raw": "",
                    "raw_para": []
                };
                if (apipostMode == 'urlencoded' || apipostMode == 'form-data') {
                    for (var key in properties) {
                        var item = properties[key];
                        key && request.body.parameter.push({
                            is_checked: "1",
                            type: item.hasOwnProperty('format') && item.format == 'binary' ? 'File' : 'Text',
                            key: key || "",
                            value: (item === null || item === void 0 ? void 0 : item.example) || "",
                            not_null: "1",
                            description: (item === null || item === void 0 ? void 0 : item.description) || "",
                            field_type: item.hasOwnProperty('type') ? item.type.charAt(0).toUpperCase() + item.type.slice(1) : "Text"
                        });
                    }
                }
                else if (apipostMode == 'json') {
                    if (bodyData.hasOwnProperty('example')) {
                        var example = bodyData.example;
                        if (typeof example == 'object') {
                            example = JSON.stringify(example);
                        }
                        request.body.raw = example;
                    }
                    else {
                        if (JSON.stringify(properties) !== "{}") {
                            var RawObj = {};
                            this.handleBodyJsonSchema(RawObj, properties);
                            request.body.raw = JSON.stringify(RawObj);
                        }
                    }
                }
            }
            if (swaggerApi.hasOwnProperty('responses')) {
                var successRawObj = {};
                var errorRawObj = {};
                for (var status in swaggerApi.responses) {
                    if (Object.prototype.hasOwnProperty.call(swaggerApi.responses, status)) {
                        var element = swaggerApi.responses[status];
                        if (element.hasOwnProperty('content') && ((_b = Object.keys(element.content)) === null || _b === void 0 ? void 0 : _b.length) > 0) {
                            var content = element.content;
                            var mode = content instanceof Object ? Object.keys(content)[0] : "none";
                            var bodyData = content[mode];
                            var apipostMode = this.getApipostMode(mode);
                            var properties = {};
                            if (bodyData.hasOwnProperty('schema')) {
                                var schema = bodyData.schema;
                                if (schema.hasOwnProperty('properties')) {
                                    properties = schema.properties;
                                }
                                if (schema.hasOwnProperty('items')) {
                                    properties = (_c = schema === null || schema === void 0 ? void 0 : schema.items) === null || _c === void 0 ? void 0 : _c.properties;
                                }
                            }
                            if (apipostMode == 'json') {
                                if (bodyData.hasOwnProperty('example')) {
                                    var example = bodyData.example;
                                    if (typeof example == 'object') {
                                        if (/^2\d{2}$/.test(status)) {
                                            successRawObj[status] = __assign({}, example);
                                        }
                                        else {
                                            errorRawObj[status] = __assign({}, example);
                                        }
                                    }
                                }
                                else {
                                    if (JSON.stringify(properties) !== "{}") {
                                        var RawObj = {};
                                        this.handleBodyJsonSchema(RawObj, properties);
                                        if (/^2\d{2}$/.test(status)) {
                                            successRawObj[status] = __assign({}, RawObj);
                                        }
                                        else {
                                            errorRawObj[status] = __assign({}, RawObj);
                                        }
                                    }
                                }
                            }
                        }
                        else {
                            if (/^2\d{2}$/.test(status)) {
                                successRawObj[status] = (element === null || element === void 0 ? void 0 : element.description) || "";
                            }
                            else {
                                errorRawObj[status] = (element === null || element === void 0 ? void 0 : element.description) || "";
                            }
                        }
                    }
                }
                response.success.raw = JSON.stringify(successRawObj);
                response.error.raw = JSON.stringify(errorRawObj);
            }
            if (swaggerApi.hasOwnProperty('tags') && swaggerApi.tags.length > 0) {
                for (var _e = 0, _f = swaggerApi.tags; _e < _f.length; _e++) {
                    var folder = _f[_e];
                    if (this.folders.hasOwnProperty(folder)) {
                        this.folders[folder].children.push(api);
                    }
                }
            }
            else {
                this.apis.push(api);
            }
        }
    };
    Swagger2Apipost.prototype.handlePath = function (path, pathItem, tags) {
        var _a, _b;
        var url = path;
        if (url.charAt(0) == '/') {
            url = url.substring(1);
        }
        if (url.charAt(url.length - 1) == '/') {
            url = url.substring(0, url.length - 1);
        }
        url = decodeURI(this.basePath + url);
        for (var method in pathItem) {
            var swaggerApi = pathItem[method];
            if (swaggerApi.hasOwnProperty('tags') && swaggerApi.tags.length > 0) {
                this.handleTags(swaggerApi.tags, tags);
            }
            var api = {
                'name': (swaggerApi === null || swaggerApi === void 0 ? void 0 : swaggerApi.summary) || '新建接口',
                'target_type': 'api',
                'url': url || '',
                'method': method.toUpperCase() || 'GET',
                'request': {
                    'description': (swaggerApi === null || swaggerApi === void 0 ? void 0 : swaggerApi.description) || '',
                },
                'response': {
                    'success': {
                        'parameter': [],
                        'raw': ''
                    },
                    'error': {
                        'parameter': [],
                        'raw': ''
                    }
                }
            }, thisProduces = void 0, thisConsumes = void 0;
            if (swaggerApi.produces) {
                thisProduces = swaggerApi.produces;
            }
            if (swaggerApi.consumes) {
                thisConsumes = swaggerApi.consumes;
            }
            var request = api.request;
            var response = api.response;
            if (thisProduces && thisProduces.length > 0) {
                if (!request.hasOwnProperty('header')) {
                    request.header = [];
                }
                request.header.push({
                    is_checked: "1",
                    type: 'Text',
                    key: "Accept",
                    value: thisProduces.join(', ') || "",
                    not_null: "1",
                    description: "",
                    field_type: "Text"
                });
            }
            if (thisConsumes && thisConsumes.length > 0) {
                if (!request.hasOwnProperty('header')) {
                    request.header = [];
                }
                request.header.push({
                    is_checked: "1",
                    type: 'Text',
                    key: "Content-Type",
                    value: thisConsumes[0] || "",
                    not_null: "1",
                    description: "",
                    field_type: "Text"
                });
            }
            if (swaggerApi.hasOwnProperty('parameters')) {
                var mode = 'none';
                if (thisConsumes && thisConsumes.length > 0) {
                    mode = thisConsumes[0];
                }
                var apipostMode = this.getApipostMode(mode);
                request.body = {
                    "mode": apipostMode,
                    "parameter": [],
                    "raw": "",
                    "raw_para": []
                };
                for (var _i = 0, _c = swaggerApi.parameters; _i < _c.length; _i++) {
                    var parameter = _c[_i];
                    if (parameter.hasOwnProperty('in')) {
                        if (parameter.in == 'query') {
                            if (!request.hasOwnProperty('query')) {
                                request['query'] = [];
                            }
                            (parameter === null || parameter === void 0 ? void 0 : parameter.name) && request.query.push({
                                is_checked: "1",
                                type: "Text",
                                key: (parameter === null || parameter === void 0 ? void 0 : parameter.name) || '',
                                value: (parameter === null || parameter === void 0 ? void 0 : parameter.example) || (parameter === null || parameter === void 0 ? void 0 : parameter.default) || '',
                                not_null: parameter.hasOwnProperty('required') && !parameter.required ? "-1" : "1",
                                description: (parameter === null || parameter === void 0 ? void 0 : parameter.description) || '',
                                field_type: "Text" // 类型
                            });
                        }
                        else if (parameter.in == 'header') {
                            if (!request.hasOwnProperty('header')) {
                                request['header'] = [];
                            }
                            (parameter === null || parameter === void 0 ? void 0 : parameter.name) && request.header.push({
                                is_checked: "1",
                                type: "Text",
                                key: (parameter === null || parameter === void 0 ? void 0 : parameter.name) || '',
                                value: (parameter === null || parameter === void 0 ? void 0 : parameter.example) || (parameter === null || parameter === void 0 ? void 0 : parameter.default) || '',
                                not_null: parameter.hasOwnProperty('required') && !parameter.required ? "-1" : "1",
                                description: (parameter === null || parameter === void 0 ? void 0 : parameter.description) || '',
                                field_type: "Text" // 类型
                            });
                        }
                        else if (parameter.in == 'path') {
                            if (!request.hasOwnProperty('resful')) {
                                request['resful'] = [];
                            }
                            (parameter === null || parameter === void 0 ? void 0 : parameter.name) && request.resful.push({
                                is_checked: "1",
                                type: "Text",
                                key: (parameter === null || parameter === void 0 ? void 0 : parameter.name) || '',
                                value: (parameter === null || parameter === void 0 ? void 0 : parameter.example) || (parameter === null || parameter === void 0 ? void 0 : parameter.default) || '',
                                not_null: parameter.hasOwnProperty('required') && !parameter.required ? "-1" : "1",
                                description: (parameter === null || parameter === void 0 ? void 0 : parameter.description) || '',
                                field_type: "Text" // 类型
                            });
                        }
                        else if (parameter.in == 'body') {
                            if ((parameter.hasOwnProperty('schema') && parameter.schema.hasOwnProperty('properties') && JSON.stringify(parameter.schema.properties) !== "{}") || ((_a = parameter === null || parameter === void 0 ? void 0 : parameter.schema) === null || _a === void 0 ? void 0 : _a.type) === 'array') {
                                var RawObj = {};
                                if (parameter.schema.type === 'array') {
                                    this.handleBodyJsonSchema(RawObj, parameter.schema.items.properties);
                                }
                                else {
                                    this.handleBodyJsonSchema(RawObj, parameter.schema.properties);
                                }
                                request.body.raw = JSON.stringify(RawObj);
                            }
                            else {
                                request.body.raw = (parameter === null || parameter === void 0 ? void 0 : parameter.description) || '';
                            }
                        }
                        else if (parameter.in == 'formData') {
                            parameter.name && request.body.parameter.push({
                                is_checked: "1",
                                type: parameter.hasOwnProperty('type') && parameter.type == 'file' ? 'File' : "Text",
                                key: (parameter === null || parameter === void 0 ? void 0 : parameter.name) || '',
                                value: (parameter === null || parameter === void 0 ? void 0 : parameter.example) || (parameter === null || parameter === void 0 ? void 0 : parameter.default) || '',
                                not_null: parameter.hasOwnProperty('required') && !parameter.required ? "-1" : "1",
                                description: (parameter === null || parameter === void 0 ? void 0 : parameter.description) || '',
                                field_type: "Text" // 类型
                            });
                        }
                    }
                }
            }
            if (swaggerApi.hasOwnProperty('responses')) {
                var successRawObj = {};
                var errorRawObj = {};
                for (var status in swaggerApi.responses) {
                    if (Object.prototype.hasOwnProperty.call(swaggerApi.responses, status)) {
                        var element = swaggerApi.responses[status];
                        if ((element.hasOwnProperty('schema') && element.schema.hasOwnProperty('properties') && JSON.stringify(element.schema.properties) !== "{}") || ((_b = element === null || element === void 0 ? void 0 : element.schema) === null || _b === void 0 ? void 0 : _b.type) === 'array') {
                            var RawObj = {};
                            if (element.schema.type === 'array') {
                                this.handleBodyJsonSchema(RawObj, element.schema.items.properties);
                            }
                            else {
                                this.handleBodyJsonSchema(RawObj, element.schema.properties);
                            }
                            if (/^2\d{2}$/.test(status)) {
                                successRawObj[status] = __assign({}, RawObj);
                            }
                            else {
                                errorRawObj[status] = __assign({}, RawObj);
                            }
                        }
                        else {
                            if (/^2\d{2}$/.test(status)) {
                                successRawObj[status] = (element === null || element === void 0 ? void 0 : element.description) || '';
                            }
                            else {
                                errorRawObj[status] = (element === null || element === void 0 ? void 0 : element.description) || '';
                            }
                        }
                    }
                }
                response.success.raw = JSON.stringify(successRawObj);
                response.error.raw = JSON.stringify(errorRawObj);
            }
            if (swaggerApi.hasOwnProperty('tags') && swaggerApi.tags.length > 0) {
                for (var _d = 0, _e = swaggerApi.tags; _d < _e.length; _d++) {
                    var folder = _e[_d];
                    if (this.folders.hasOwnProperty(folder)) {
                        this.folders[folder].children.push(api);
                    }
                }
            }
            else {
                this.apis.push(api);
            }
        }
    };
    Swagger2Apipost.prototype.handlePathsV3 = function (json) {
        var paths = json.paths;
        var tags = json.tags;
        for (var path in paths) {
            this.handlePathV3(path, paths[path], tags);
        }
    };
    Swagger2Apipost.prototype.handlePaths = function (json) {
        var paths = json.paths;
        var tags = json.tags;
        for (var path in paths) {
            this.handlePath(path, paths[path], tags);
        }
    };
    Swagger2Apipost.prototype.getParamsForPathItem = function (oldParams, newParams) {
        var retVal = {}, numOldParams, numNewParams, i, parts, lastPart, getBaseParam;
        oldParams = oldParams || [];
        newParams = newParams || [];
        numOldParams = oldParams.length;
        numNewParams = newParams.length;
        for (i = 0; i < numOldParams; i++) {
            if (oldParams[i].$ref) {
                if (oldParams[i].$ref.indexOf('#/parameters') === 0) {
                    parts = oldParams[i].$ref.split('/');
                    lastPart = parts[parts.length - 1];
                    getBaseParam = this.baseParams[lastPart];
                    retVal[lastPart] = getBaseParam;
                }
            }
            else {
                retVal[oldParams[i].name] = oldParams[i];
            }
        }
        for (i = 0; i < numNewParams; i++) {
            if (newParams[i].$ref) {
                if (newParams[i].$ref.indexOf('#/parameters') === 0) {
                    parts = newParams[i].$ref.split('/');
                    lastPart = parts[parts.length - 1];
                    getBaseParam = this.baseParams[lastPart];
                    retVal[lastPart] = getBaseParam;
                }
            }
            else {
                retVal[newParams[i].name] = newParams[i];
            }
        }
        return retVal;
    };
    Swagger2Apipost.prototype.createNewFolder = function (name, tags) {
        var _a;
        var description = ((_a = tags === null || tags === void 0 ? void 0 : tags.find(function (tag) { return tag.name === name; })) === null || _a === void 0 ? void 0 : _a.description) || '';
        var newFolder = {
            'name': name,
            'target_type': 'folder',
            'description': description,
            'children': [],
        };
        return newFolder;
    };
    Swagger2Apipost.prototype.convert = function (json, options) {
        if (options === void 0) { options = null; }
        return __awaiter(this, void 0, void 0, function () {
            var swagger3Json_1, validationResult, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 5, , 6]);
                        if (options && options instanceof Object) {
                            this.options = __assign(__assign({}, this.options), options);
                        }
                        swagger3Json_1 = {};
                        if (!(json instanceof Object)) return [3 /*break*/, 2];
                        return [4 /*yield*/, SwaggerClient__default["default"].resolve({ spec: json }).then(function (swaggerJson) {
                                swagger3Json_1 = swaggerJson.spec;
                            })];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, SwaggerClient__default["default"].resolve({ url: json }).then(function (swaggerJson) {
                            swagger3Json_1 = swaggerJson.spec;
                        })];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        validationResult = this.validate(swagger3Json_1);
                        if (validationResult.status === 'error') {
                            return [2 /*return*/, validationResult];
                        }
                        this.handleInfo(swagger3Json_1);
                        if (this.version == '2.0') {
                            this.setBasePath(swagger3Json_1);
                            this.handlePaths(swagger3Json_1);
                        }
                        else if (this.version == '3.0') {
                            this.handleServers(swagger3Json_1);
                            this.handlePathsV3(swagger3Json_1);
                        }
                        validationResult.data = {
                            project: this.project,
                            apis: this.apis,
                            env: this.env,
                        };
                        // console.log('project', JSON.stringify(validationResult));
                        return [2 /*return*/, validationResult];
                    case 5:
                        error_1 = _a.sent();
                        if ((error_1 === null || error_1 === void 0 ? void 0 : error_1.name) === 'AbortError') {
                            return [2 /*return*/, this.ConvertResult('error', '数据过大，请求超时。')];
                        }
                        return [2 /*return*/, this.ConvertResult('error', String(error_1))];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    Swagger2Apipost.prototype.endsWith = function (str, suffix) {
        return str.indexOf(suffix, str.length - suffix.length) !== -1;
    };
    return Swagger2Apipost;
}());

module.exports = Swagger2Apipost;

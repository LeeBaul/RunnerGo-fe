'use strict';

var apipost2har = /** @class */ (function () {
    function apipost2har() {
        this.version = '1.0';
        this.project = {};
        this.apis = [];
        this.env = [];
    }
    apipost2har.prototype.createMode = function (type) {
        var MODE = {
            none: 'none',
            'form-data': 'multipart/form-data',
            urlencoded: 'application/x-www-form-urlencoded',
            json: 'application/json',
            xml: 'application/xml',
            javascript: 'application/javascript',
            plain: 'text/plain',
            html: 'text/html',
        };
        if (MODE[type]) {
            return MODE[type];
        }
        else {
            return 'multipart/form-data';
        }
    };
    apipost2har.prototype.ConvertResult = function (status, message, data) {
        if (data === void 0) { data = ''; }
        return {
            status: status,
            message: message,
            data: data
        };
    };
    apipost2har.prototype.validate = function (json) {
        // if (!json.hasOwnProperty('projectInfo')) {
        //   return this.ConvertResult('error', 'Must contain a ApipostJson field');
        // }
        return this.ConvertResult('success', '');
    };
    apipost2har.prototype.handleData = function (json) {
        var harRequest = {
            method: (json === null || json === void 0 ? void 0 : json.method) || 'GET',
            url: '',
            cookies: [],
            headers: [],
            queryString: [],
            postData: {},
            comment: (json === null || json === void 0 ? void 0 : json.description) || ''
        };
        if (json.hasOwnProperty('request')) {
            var request = (json || {}).request;
            harRequest.url = (request === null || request === void 0 ? void 0 : request.url) || '';
            if (request.hasOwnProperty('header') && request.header.hasOwnProperty('parameter') && request.header.parameter instanceof Array) {
                for (var _i = 0, _a = request.header.parameter; _i < _a.length; _i++) {
                    var header = _a[_i];
                    if (header.key && (!header.hasOwnProperty('is_checked') || header.is_checked == 1)) {
                        harRequest.headers.push({
                            name: (header === null || header === void 0 ? void 0 : header.key) || '',
                            value: (header === null || header === void 0 ? void 0 : header.value) || '',
                            comment: (header === null || header === void 0 ? void 0 : header.description) || '',
                        });
                    }
                }
            }
            if (request.hasOwnProperty('query') && request.query.hasOwnProperty('parameter') && request.query.parameter instanceof Array) {
                for (var _b = 0, _c = request.query.parameter; _b < _c.length; _b++) {
                    var query = _c[_b];
                    if (query.key && (!query.hasOwnProperty('is_checked') || query.is_checked == 1)) {
                        harRequest.queryString.push({
                            name: (query === null || query === void 0 ? void 0 : query.key) || '',
                            value: (query === null || query === void 0 ? void 0 : query.value) || '',
                            comment: (query === null || query === void 0 ? void 0 : query.description) || '',
                        });
                    }
                }
            }
            if (request.hasOwnProperty('body') && request.body.hasOwnProperty('mode') && request.body.mode != 'none') {
                var body = request.body;
                harRequest.postData = {
                    mimeType: this.createMode(body.mode),
                    params: [],
                    text: "",
                    comment: ""
                };
                if (body.mode == 'form-data' || body.mode == 'urlencoded') {
                    if (body.hasOwnProperty('parameter') && body.parameter instanceof Array) {
                        for (var _d = 0, _e = body.parameter; _d < _e.length; _d++) {
                            var parm = _e[_d];
                            if (parm.key && (!parm.hasOwnProperty('is_checked') || parm.is_checked == 1)) {
                                var harParm = {
                                    name: (parm === null || parm === void 0 ? void 0 : parm.key) || '',
                                    value: (parm === null || parm === void 0 ? void 0 : parm.value) || '',
                                    comment: (parm === null || parm === void 0 ? void 0 : parm.description) || ""
                                };
                                if (parm.hasOwnProperty('type') && parm.type == 'File') {
                                    harParm['fileName'] = (parm === null || parm === void 0 ? void 0 : parm.value) || '';
                                    harParm['contentType'] = (parm === null || parm === void 0 ? void 0 : parm.content_type) || '';
                                }
                                harRequest.postData.params.push(harParm);
                            }
                        }
                    }
                }
                else {
                    harRequest.postData.text = (body === null || body === void 0 ? void 0 : body.raw) || '';
                }
            }
        }
        return harRequest;
    };
    apipost2har.prototype.convert = function (json) {
        try {
            var validationResult = this.validate(json);
            if (validationResult.status === 'error') {
                return validationResult;
            }
            validationResult.data = this.handleData(json);
            console.log('api', JSON.stringify(validationResult));
            return validationResult;
        }
        catch (error) {
            return this.ConvertResult('error', String(error));
        }
    };
    return apipost2har;
}());

module.exports = apipost2har;

'use strict';

var uuid = require('uuid');
var dayjs = require('dayjs');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var dayjs__default = /*#__PURE__*/_interopDefaultLegacy(dayjs);

var fullProject = function (newJson, project) {
    var _a, _b;
    var project_id = uuid.v4();
    newJson['project'] = {
        project_id: project_id,
        team_id: '-1',
        name: (project === null || project === void 0 ? void 0 : project.name) || '新建项目',
        description: (project === null || project === void 0 ? void 0 : project.description) || '',
        details: {
            script: {
                pre_script: ((_a = project === null || project === void 0 ? void 0 : project.script) === null || _a === void 0 ? void 0 : _a.pre_script) || '',
                pre_script_switch: 1,
                test: ((_b = project === null || project === void 0 ? void 0 : project.script) === null || _b === void 0 ? void 0 : _b.test) || '',
                test_switch: 1,
            },
            markList: [{
                    key: 'developing',
                    name: '开发中',
                    is_default: true,
                },
                {
                    key: 'complated',
                    name: '已完成',
                    is_default: true,
                },
                {
                    key: 'modifying',
                    name: '需修改',
                    is_default: true,
                },
            ],
            globalDescriptionVars: {
                project_id: project_id,
                list: []
            },
            request: {
                auth: project.hasOwnProperty('auth') && typeof project.auth == 'object' ? project.auth : {
                    type: 'noauth',
                    kv: {
                        key: '',
                        value: '',
                    },
                    bearer: {
                        key: ''
                    },
                    basic: {
                        username: '',
                        password: ''
                    }
                },
                header: [],
                query: [],
                body: [],
                cookie: []
            },
            variable: project.hasOwnProperty('variable') && typeof project.variable == 'object' ? project.variable : {},
        },
        methods: ['POST', 'GET', 'PUT', 'PATCH', 'DELETE', 'COPY', 'HEAD', 'OPTIONS', 'LINK', 'UNLINK', 'PURGE', 'LOCK', 'UNLOCK', 'PROPFIND', 'VIEW'],
        is_admin: 1,
        is_manager: 1,
        createTime: dayjs__default["default"](new Date()).format('YYYY-MM-DD HH:mm:ss')
    };
};
var fullEnv = function (newJson, env) {
    var project_id = (newJson.project || {}).project_id;
    newJson['env'] = [];
    if (env && env instanceof Array && env.length > 0) {
        env.forEach(function (item) {
            var env_id = uuid.v4();
            newJson.env.push({
                name: (item === null || item === void 0 ? void 0 : item.name) || '未命名环境',
                pre_url: (item === null || item === void 0 ? void 0 : item.pre_url) || '',
                type: (item === null || item === void 0 ? void 0 : item.type) || 'custom',
                list: (item === null || item === void 0 ? void 0 : item.list) || {},
                env_id: env_id,
                id: "".concat(project_id, "/").concat(env_id)
            });
        });
    }
};
var createApi = function (items, newJson, pid) {
    if (pid === void 0) { pid = '0'; }
    var project_id = (newJson.project || {}).project_id;
    items.forEach(function (api) {
        var _a, _b, _c, _d, _e;
        var request = (api || {}).request;
        var target_type = 'api';
        if (api.hasOwnProperty('target_type')) {
            if (api.target_type == 'folder' || (api.hasOwnProperty('children') && api.children instanceof Array)) {
                target_type = 'folder';
            }
            else {
                target_type = 'api';
            }
        }
        var target = {
            update_day: parseInt(String(new Date(new Date().toLocaleDateString()).getTime() / 1000), 10),
            update_dtime: Date.parse(String(new Date())) / 1000,
            create_dtime: Date.parse(String(new Date())) / 1000,
            is_changed: -1,
            mark: (api === null || api === void 0 ? void 0 : api.mark) || 'developing',
            method: api.hasOwnProperty('method') ? api.method.toUpperCase() : 'POST',
            parent_id: pid || '0',
            project_id: project_id,
            sort: -1,
            target_id: uuid.v4(),
            type_sort: '1',
            version: 1,
            target_type: target_type
        };
        if (target_type == 'folder') {
            target['name'] = (api === null || api === void 0 ? void 0 : api.name) || '新建目录';
            target['request'] = {
                auth: request && request.hasOwnProperty('auth') && typeof request.auth == 'object' ? request.auth : {
                    type: 'noauth',
                    kv: {
                        key: '',
                        value: '',
                    },
                    bearer: {
                        key: ''
                    },
                    basic: {
                        username: '',
                        password: ''
                    }
                },
                body: request && request.hasOwnProperty('body') && request.body instanceof Array ? request.body : [],
                description: (api === null || api === void 0 ? void 0 : api.description) || '',
                header: request && request.hasOwnProperty('header') && request.header instanceof Array ? request.header : [],
                query: request && request.hasOwnProperty('query') && request.query instanceof Array ? request.query : [],
            };
            target['script'] = {
                pre_script: '',
                pre_script_switch: 1,
                test: '',
                test_switch: 1,
            };
            newJson.apis.push(target);
            createApi((api === null || api === void 0 ? void 0 : api.children) || [], newJson, target.target_id);
        }
        else if (target_type == 'api') {
            target['name'] = (api === null || api === void 0 ? void 0 : api.name) || '新建接口';
            target['request'] = {
                auth: request && request.hasOwnProperty('auth') && typeof request.auth == 'object' ? request.auth : {
                    type: 'noauth',
                    kv: {
                        key: '',
                        value: '',
                    },
                    bearer: {
                        key: ''
                    },
                    basic: {
                        username: '',
                        password: ''
                    }
                },
                body: request && request.hasOwnProperty('body') && typeof request.body == 'object' ? request.body : {
                    mode: 'none',
                    parameter: [],
                    raw: '',
                    raw_para: []
                },
                cookie: {
                    parameter: []
                },
                description: ((_a = api === null || api === void 0 ? void 0 : api.request) === null || _a === void 0 ? void 0 : _a.description) || '',
                event: {
                    pre_script: '',
                    test: ''
                },
                header: {
                    parameter: request && request.hasOwnProperty('header') && request.header instanceof Array ? request.header : []
                },
                query: {
                    parameter: request && request.hasOwnProperty('query') && request.query instanceof Array ? request.query : []
                },
                resful: {
                    parameter: request && request.hasOwnProperty('resful') && request.resful instanceof Array ? request.resful : []
                },
                url: (api === null || api === void 0 ? void 0 : api.url) || ''
            };
            target['response'] = {
                success: {
                    parameter: [],
                    raw: ((_c = (_b = api === null || api === void 0 ? void 0 : api.response) === null || _b === void 0 ? void 0 : _b.success) === null || _c === void 0 ? void 0 : _c.raw) || ''
                },
                error: {
                    parameter: [],
                    raw: ((_e = (_d = api === null || api === void 0 ? void 0 : api.response) === null || _d === void 0 ? void 0 : _d.error) === null || _e === void 0 ? void 0 : _e.raw) || ''
                }
            };
            target['mock'] = '{}';
            target['mock_url'] = '';
            target['url'] = (api === null || api === void 0 ? void 0 : api.url) || '';
            newJson.apis.push(target);
        }
    });
};
var fullAPis = function (newJson, apis) {
    if (apis && apis instanceof Array && apis.length > 0) {
        newJson['apis'] = [];
        createApi(apis, newJson, '0');
    }
};
var Module2ApiPostFull = function (json) {
    var project = json.project, env = json.env, apis = json.apis;
    var newJson = {};
    fullProject(newJson, project);
    fullEnv(newJson, env);
    fullAPis(newJson, apis);
    console.log(JSON.stringify(newJson));
    return newJson;
};

module.exports = Module2ApiPostFull;

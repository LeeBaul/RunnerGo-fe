- name: deploy apipost project
  hosts: all
  vars:
    backup_path: /data/backup
  tasks:
    - name: register variable
      shell: date "+%F_%H-%M-%S"
      register: bak_var
    - name: 创建项目目录
      file: path={{ deploy_path }}/{{ project_name }}   state=directory  
    - name: 创建项目备份目录
      file: path={{ backup_path  }}/{{ project_name }} mode=0755 state=directory 
    - name: backup file
      archive: path={{ deploy_path }}/{{ project_name }} dest={{ backup_path  }}/{{ project_name }}/{{ project_name }}_{{ bak_var.stdout }}.tar.gz
      when: backfile == 'true'
    - name: remov  {{ deploy_path }}/{{ project_name }}
      file: path={{ deploy_path }}/{{ project_name }}  state=absent
#    - name: updata project
#      synchronize: src={{ WORKSPACE  }}/  dest={{ deploy_path }}/{{ project_name }}
    - name: updata project
      synchronize: 
        src: "{{ WORKSPACE  }}/"
        dest: "{{ deploy_path }}/{{ project_name }}"
        rsync_opts: 
          - "--exclude=.git"
          - "--exclude=Jenkinsfile"
          - "--exclude=playbook.yaml"
          - "--exclude=hosts"
    - name: modfiy authority
      file: dest={{ deploy_path }}/{{ project_name }}   recurse=yes  mode=777
      when: backfile == 'false'
    - name: modfiy authority group
      file: dest={{ deploy_path }}/{{ project_name }}   recurse=yes  group=api owner=api
    - name: check backup file 
      shell: ls  -t1 {{ backup_path  }}/{{ project_name }}/{{ project_name }}*.gz  | tail  -n  +4
      register: fileline_bak
    - debug: var=fileline_bak.stdout_lines
    - name: clean backup file 
      file: path={{ item  }} state=absent
      with_items: "{{  fileline_bak.stdout_lines }}"
      when:
        - (( fileline_bak.stdout_lines | length ) > 1)